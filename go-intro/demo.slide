go hello("World!")
24 Nov 2014

Sadish Ravi
sadish@simulmedia.com

* Go!!

   Programming language by Google
   Pet project by Robert Griesemer, Rob Pike, Ken Thompson
   Modern day C
   Reliable python
   Simpler Java
   Friendly Erlang/Pascal

* Why Go?

   Write sequential, non-blocking and highly concurrent code
   Compile to native code and execute faster
   Enjoy type safety at the same time feel dynamic
   Benefit from Garbage collection, stack handling, goroutines, channels etc
   Write systems code, web app or anything you want
   very soon you can write an Android app using Go

* Hello Sum, Python!
.play sum.py

Simple! But can we make it faster for larger arrays.

  Yes!! Threads, Multiprocessing !!

* Lets try in Go
.play sum.go

Similar to python, bit more verbose but not that bad

* Lets try to make it faster with few changes!!

How?

  Distribute the computation. Utilize all cores!

Enter Goroutines and channels

Lets change the method to publish the result to a channel when its done
instead of making the caller to wait

  func sum2(a []int, c chan int) {
    sum := 0
    for _, v := range a {
        sum += v
    }
    c <- sum // send sum to c
  }

How can we leverage this function to make the computation faster??

  Divide and Conquer

* Concurrent version
.play sum_concurrent.go

* Benefits achieved

  Logic expressed as sequential code
  Designed to run concurrently
  Can be parallized to high degree and tuned to get faster results

* Related Problem

Process data file and apply downstream pipeline operations

  read => transform => filter => clean => project => write

Data is big but not big enough to achieve hadoop/emr benefits

Trying to solve in
Java:
1. Sequential processing
2. Multithreaded ... (Thread pool/Executers/Synchronzied/locks/Joins ...)
3. Multiprocess ??? :(

Python:
1. Sequential processing easier than Java/less boilerplate
2. threading .. Shared access/locks/Global Interpreter lock
3. Multiprocessing .. Fork/Star/Join/queue to communicate/Pipes/Locks to sync processes


* Simple Solution in Go
1. No threads/No multiprocess/No pools/No locks/mutexes/fork/join
2. Concurrency is built as language primitive in the form of Goroutines.
3. Communication and synchronization between goroutines are handled using channels
another language basic construct

* Go, Mapper!
.play -edit mapper.go
