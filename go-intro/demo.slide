go hello("World!")
04 Dec 2014

Sadish Ravi
sadish@simulmedia.com

* Gopher!!
.image http://www.unixstickers.com/image/cache/data/stickers/golang/golang.sh-600x600.png

* Go !!

   Programming language by Google
   Pet project by Robert Griesemer, Rob Pike, Ken Thompson
   Modern day C
   Reliable python
   Simpler Java
   Friendly Erlang/Pascal

* Why Go?

   Write sequential, non-blocking and highly concurrent code
   Compile to native code and execute faster
   Enjoy type safety at the same time feel dynamic
   Benefit from Garbage collection, stack handling, goroutines, channels etc
   Write systems code, web app or anything you want
   very soon you can write an Android app using Go

* Hello Sum, Python!
.play sum.py

Simple! But can we make it faster for larger arrays.

  Yes!! Threads, Multiprocessing !!

* Sum 1.0 in Go
.play sum.go

Similar to python, bit more verbose but not that bad

* Lets try to make it faster with few changes!!

How?

  Distribute the computation. Utilize all cores!

Enter Goroutines

*Threads vs Goroutines*

  -GoRoutine is a function that executes concurrently with other go-routines in
   the same address-space

  -Go claims it can execute 100-1000-10's of thousands of Goroutine in a program

  -In typical languages program threads are mapped to OS threads and end up
   using fixed amount of memory in stack and involves context switching.
   Thus creating too many threads is not a good idea

  -Also threads communicate via shared memory and which needs complex
   synchronization and locks to prevent threads from stepping on each other toe's

* Contd...

  -On the other hand Goroutines are handled by Go Runtime and are not visible to OS
   The runtime multiplexes more than one Goroutines on to the same OS thread.

  -They are on the heap and each require around 8Kb of space

  -Goroutines communicate via message passing(channels)

  -Context switching with Goroutines are much lesser than threads as the
   number of registers involved in the switch is just 3 compared to some 16 in threads

  -Mutiple Threads blocking on external resources is a problem but
   in case of Goroutines even if some goroutines are blocked, the runtime
   will take care of scheduling other routines

  -Go program can dictate[GOMAXPROCS] the number CPU Cores to be used.
   Best performance can be achieved by tuning the number of cores and
   number of goroutines for the program


* Sum 2.0
Lets change the method to publish the result to a channel when its done
instead of making the caller to wait

  func sum2(a []int, c chan int) {
    sum := 0
    for _, v := range a {
        sum += v
    }
    c <- sum // send sum to c
  }

How can we leverage this function to make the computation faster??

  Divide and Conquer

* Concurrent version
.play sum_concurrent.go

* Benefits achieved

  Logic expressed as sequential code
  Designed to run concurrently
  Can be parallized to high degree and tuned to get faster results

* Benchmark go code
.code bench/sum.go /START/,/END/
.code bench/sum_test.go

* Benchmark results

go test -bench=.

   testing: warning: no tests to run
   PASS
   BenchmarkSum10	500000000	         6.69 ns/op
   ok  	github.com/codeforgood/slides/go-intro/bench	4.065s

* Related Problem

Process data file and apply downstream pipeline operations

  read => transform => filter => clean => project => write

Data is big but not big enough to achieve hadoop/emr benefits

Trying to solve in
Java:
1. Sequential processing
2. Multithreaded ... (Thread pool/Executers/Synchronzied/locks/Joins ...)
3. Multiprocess ??? :(

Python:
1. Sequential processing easier than Java/less boilerplate
2. threading .. Shared access/locks/Global Interpreter lock
3. Multiprocessing .. Fork/Star/Join/queue to communicate/Pipes/Locks to sync processes


* Simple Solution in Go
1. No threads/No multiprocess/No pools/No locks/mutexes/fork/join
2. Concurrency is built as language primitive in the form of Goroutines.
3. Communication and synchronization between goroutines are handled using channels
another language basic construct

* Source data

.code test.txt

* Mapper! ReadFile
.code -numbers mapper.go /START READ/,/END READ/

* Mapper! Filter
.code -numbers mapper.go /START FILTER/,/END FILTER/

* Mapper! Merge
.code -numbers mapper.go /START MERGE/,/END MERGE/

* Mapper! WriteFile
.code -numbers mapper.go /START WRITE/,/END WRITE/

* Mapper! Main
.play -numbers mapper.go /START MAIN/,/END MAIN/

* Writing Go code
 1. Start simple
 2. Write sequential code (one global goroutine)
 3. Be happy and make product sort of happy
 4. Want to please your manager??
 4. Identify areas of code that can execute concurrently and express them as small functions/goroutine.
 5. Use channels to communicate between goroutine
 6. Tested? No blocking routines? Works as before?
 7. Now charge it..Run 100'sor 1000's of routines
 9. Tune it to get best performance
 8. Now your manager and product are proud of you!!!

* Remember what Rob Pike said

   "when people hear the word concurrency they often think of parallelism, a related but quite distinct concept.

    In programming, concurrency is the composition of independently executing processes, while parallelism is the simultaneous execution of (possibly related) computations.

    Concurrency is about dealing with lots of things at once.
    Parallelism is about doing lots of things at once"

    - Rob Pike

*"Parallelism comes as a by-product for a well concurrent program"*

.link http://www.youtube.com/watch?v=cN_DpYBzKso "Concurrency is not parallelism"

* About this presentation

Build using Go Present tool

.link https://godoc.org/github.com/polaris1119/go.tools/present

* References

.link http://learnxinyminutes.com/docs/go/
.link https://gobyexample.com/
.link https://play.golang.org/
.link http://golang.org/
.link http://blog.nindalf.com/how-goroutines-work/
